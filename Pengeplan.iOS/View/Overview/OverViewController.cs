// This file has been autogenerated from a class added in the UI designer.
using System;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using Pengeplan.Core;
using System.Drawing;
using System.Linq;
using System.Collections.Generic;
using System.Net;
using MonoTouch.CoreAnimation;

namespace Pengeplan.iOS
{
	public partial class OverViewController : UIViewController, IUITableViewDataSource, IUITableViewDelegate
	{
		static ITableViewViewModel viewModel;
		static SecuritiesViewModel securitiesViewModel = ServiceContainer.Resolve<SecuritiesViewModel> ();
		static DepositoriesViewModel depositoriesViewModel = ServiceContainer.Resolve<DepositoriesViewModel> ();
		static HistoryViewModel historyViewModel = ServiceContainer.Resolve<HistoryViewModel> ();
		static UpdateTransactonsViewModel updateModel = ServiceContainer.Resolve<UpdateTransactonsViewModel> ();
		UITableViewController tableViewController = new UITableViewController ();
		UIRefreshControl refreshControl = new UIRefreshControl ();

		public OverViewController (IntPtr handle) : base (handle)
		{
			viewModel = securitiesViewModel;
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			this.NavigationItem.HidesBackButton = true;

			this.SegmentedController.ValueChanged += (sender, e) => {
				switch (SegmentedController.SelectedSegment) {
				case 0:
					{
						viewModel = securitiesViewModel;
						this.SecuritiesTableView.ReloadData ();
						break;
					}
				case 1:
					{
						viewModel = depositoriesViewModel;
						this.SecuritiesTableView.ReloadData ();
						break;
					}
				case 2:
					{
						viewModel = historyViewModel;
						this.SecuritiesTableView.ReloadData ();
						break;
					}
				}
			};

			tableViewController.TableView = SecuritiesTableView;
			tableViewController.RefreshControl = refreshControl;
			refreshControl.ValueChanged += async (sender, e) => {
				refreshControl.BeginRefreshing ();
				await updateModel.UpdateTransactions ();
				this.SecuritiesTableView.ReloadData ();
				refreshControl.EndRefreshing ();
			};



			this.SecuritiesTableView.WeakDataSource = this;
			this.SecuritiesTableView.WeakDelegate = this;
			this.SecuritiesTableView.TableFooterView = new UIView (RectangleF.Empty);
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

		}

		public virtual int RowsInSection (UITableView tableView, int section)
		{
			return viewModel.NumberOfItems ();
		}

		public virtual UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			string cellIdentifier = "TableCell";
			UITableViewCell cell = tableView.DequeueReusableCell (cellIdentifier);
			// if there are no cells to reuse, create a new one
			if (cell == null) {
				cell = new UITableViewCell (UITableViewCellStyle.Value1, cellIdentifier);
				cell.SelectionStyle = UITableViewCellSelectionStyle.None;
			}


			cell.TextLabel.Text = viewModel.LeftCellContent (indexPath.Row);
			cell.DetailTextLabel.Text = viewModel.RightCellContent (indexPath.Row);

			return cell;
		}

		[Export ("tableView:didSelectRowAtIndexPath:")]
		public void RowSelected (UITableView tableView, NSIndexPath indexPath)
		{
			if (typeof(HistoryViewModel).Equals (viewModel.GetType ())) {
				this.PerformSegue ("historySeque", this);
			}

		}

		[Export ("tableView:viewForHeaderInSection:")]
		public UIView GetViewForHeader (UITableView tableView, int section)
		{
			if (typeof(SecuritiesViewModel).Equals (viewModel.GetType ())) {
				RectangleF rect = new RectangleF (0, 0, SecuritiesTableView.Frame.Size.Width, this.SecuritiesTableView.Frame.Height / 2);
				PieChart chart = new PieChart (rect);
				return chart;
			} else {
				return new UIView (RectangleF.Empty);
			}
		}

		[Export ("tableView:heightForHeaderInSection:")]
		public float GetHeightForHeader (UITableView tableView, int section)
		{
			if (typeof(SecuritiesViewModel).Equals (viewModel.GetType ())) {
				return this.SecuritiesTableView.Frame.Height / 2;
			} else {
				return 0f;
			}
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);

			if (segue.Identifier.Equals ("historySeque")) {
				var tableController = segue.DestinationViewController as TransactionTableViewController;
				if (tableController != null) {
					var source = SecuritiesTableView.WeakDataSource as IUITableViewDataSource;
					var rowPath = SecuritiesTableView.IndexPathForSelectedRow;
					var item = source.GetCell (SecuritiesTableView, rowPath);
					string paperName = item.TextLabel.Text;
					tableController.NavigationItem.Title = paperName;
					tableController.viewModel.paperName = paperName;
				}
			}
		}

		class PieChart : UIView
		{
			public PieChart (RectangleF rect) : base (rect)
			{
				this.BackgroundColor = UIColor.Clear;
			}

			public override void Draw (RectangleF rect)
			{

				RectangleF bounds = this.Bounds;
				PointF center = new PointF ((bounds.Size.Width / 2.0f), (bounds.Size.Height / 2.0f));

				int numberOfPapers = viewModel.NumberOfItems ();
				List<SecuritiesViewModel.PieChartValue> list = securitiesViewModel.DataForPieChart ();
				float amountLocalTotal = (float)list.Sum (t => t.amount);
				float anglePerAmount = 360f / amountLocalTotal;
				float currentAngle = 0;

				for (int i = 0; i < numberOfPapers; i++) {

					float startAngle = currentAngle;
					float endAngle = (float)(anglePerAmount * ((float)list [i].amount) + currentAngle);
					currentAngle = endAngle;

					UIBezierPath path = UIBezierPath.FromArc (center, Math.Min ((this.Frame.Size.Width / 2), (this.Frame.Size.Height / 2)), ConvertToRadians (startAngle), ConvertToRadians (endAngle), true);
					path.AddLineTo (center);
					UIColor color = UIColor.FromRGB (new Random ().Next (255), new Random ().Next (255), new Random ().Next (255));
					color.SetFill ();
					path.Fill ();
				}

			}

			private float ConvertToRadians (float angle)
			{
				return (float)((Math.PI / 180) * angle);
			}
		}
	}
}